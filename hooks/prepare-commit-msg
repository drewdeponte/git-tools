#!/bin/sh

# This is a script which is intended to provide the following
# functionality.
#
# 1. Contextually prevent users from commiting to a branch who's name doesn't
#    contain a JIRA issue reference.
# 2. Inform users on git best practices for adding issue into branch
#    name
# 3. Extract issues from branch name and add them to commit message

#### Configuration ####

# This is the base url that is combined with the JIRA issue identifier to create
# a proper link for the issue. Note: The trailing slash IS NEEDED.
JIRA_ISSUE_BASE_URL="https://autogravity.atlassian.net/browse/"

# This is used for education purposes. It should be an example of what a good
# branch name should look like given your branch naming scheme.
EXAMPLE_BRANCH_NAME="WEB-2342342_add_health_endpoint"

# This is an array of strings identifying branch name patterns that you want to
# exclude from being required to have a JIRA issue in its name. This generally
# includes things like the "master" branch or "develop" branch, etc. This might
# also be release branches for example.
EXCLUSION_BRANCH_PATTERNS=("^master$" "^develop$" "^release/.+$")

#### Implementation ####

# Get the path to the repository. This function returns it via stdout.
# Hence, this method is intended to be called using command
# substitution. Note: This command calls pwd so it is sensetive to
# change of current working directory. Therefore, it should be called
# prior to any commands which might change the current working
# directory.
# ex: repo_path=$(get_repository_path)
function get_repository_path {
  echo $(pwd -P)
}

# Obtain the name of the currently checked out branch and 'return' it by
# echoing it to stdout. It is intended to be called using command
# substitution.
# ex: current_branch=$(get_current_branch)
function get_current_branch {
  local current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
  echo "$current_branch"
}

# Attempt to fetch any JIRA issues from the provided branch name. If
# JIRA issues are found they are returned via stdout space
# separated. If no JIRA issues are found an empty string is returned via
# stdout. Hence, this function is intended to be called using command
# substitution.
# ex: jira_issues=$(get_jira_issues_from_branch_name "some_branch_name")
function get_jira_issues_from_branch_name {
  local branch_name=$1
  echo "$(echo "$branch_name" | grep -Eo '[A-Z]+-[0-9]+')"
}

# Build JIRA issue link given an issue identifier. This method
# returns the built JIRA issue link via stdout. Hence, it is intended to
# be called using command substitution.
# ex: jira_issue_link=$(build_jira_issue_link "WEB-23423")
function build_jira_issue_link {
  local jira_issue=$1
  echo "${JIRA_ISSUE_BASE_URL}${jira_issue}"
}

# Insert the JIRA issue links given the JIRA issue identifiers and the
# commit message file to insert them into.
# ex: insert_issue_links_into_commit_message "WEB-23423\nOPS-2332" ".git/COMMIT_EDITMSG"
function insert_jira_issue_links_into_commit_message {
  local jira_issues=$1
  local commit_message_file=$2

  local jira_issue_links=''
  for jira_issue in $jira_issues; do 
    local jira_issue_link=$(build_jira_issue_link $jira_issue)
    jira_issue_links="${jira_issue_links}"'\'$'\n'"Issue: ${jira_issue_link}"
  done

  sed -i.back '/^# Please enter the commit/i\'$'\n'"${jira_issue_links}"$'\n' $commit_message_file
}

function main {
  # The commit_msg_file contains the name of the file that contains the
  # commit log message.
  local commit_msg_file=$1

  # The commit_source is set to one of the following given their
  # associated conditional states.
  #
  # message (if -m or -F option given)
  # template (if -t option was given or configuration option commit.template is set)
  # merge (if commit is a merge or .git/MERGE_MSG file exists)
  # squash (if a .git/SQUASH_MSG file exists)
  # commit (if -c, -C, or --ammend option was given)
  local commit_source=$2

  # The commit_sha1 contains the sha1 that is used as a source for the
  # commit message if -c, -C, or --ammend option was given
  local commit_sha1=$3

  # Grab the repository path before any other commands possibly changed
  # the current working directory.
  local repository_path=$(get_repository_path)

  # Prevent users from committing if they haven't specified a JIRA issue
  # in their branch name. Also, extract the JIRA issue identifier and
  # convert it into a URL and append it to the commit message.
  local current_branch=$(get_current_branch)
  if [ "$current_branch" ]; then

    for exclusion_branch_pattern in "${EXCLUSION_BRANCH_PATTERNS[@]}"; do
      if [[ "$current_branch" =~ $exclusion_branch_pattern ]]; then
        exit 0
      fi
    done

    local jira_issues=$(get_jira_issues_from_branch_name "$current_branch")
    if [ "$jira_issues" ]; then
      insert_jira_issue_links_into_commit_message "$jira_issues" "$commit_msg_file"
      exit 0
    else
      echo "Branch '${current_branch}' needs to include a JIRA issue."
      echo "  ex: ${EXAMPLE_BRANCH_NAME}"
      echo
      echo "This can easily be done with something like..."
      echo "$ git branch -m <new-branch-name-with-tix>"
      exit 1
    fi
  fi
}

main $1 $2 $3
